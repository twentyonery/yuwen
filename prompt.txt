你是一位资深的全栈Web应用工程师和系统架构师。你的任务是根据以下详细需求，直接设计、开发并交付一个完整的、可部署的PC端Web游戏项目。该项目需采用现代Web技术栈（HTML5, CSS3, JavaScript/ES6+），并通过前端JavaScript直接与**单一**外部AI服务进行通信，无额外后端服务。

### 项目名称: 语闻 (Yuwen)

### 项目概述:
这是一个以中国历史人物为主题的单页互动解谜Web应用。玩家扮演一位现代小商人，因接触神秘古文物而穿越，必须通过与由**同一个**外部AI服务扮演的不同历史人物进行对话来猜测其身份。项目是一个纯前端应用，通过AJAX/Fetch API与配置好的外部AI服务进行通信。AI服务本身负责处理角色扮演和同义词判断。

### 核心功能模块:

1.  **前端 (Frontend - HTML/CSS/JavaScript)**:
    *   **开始页 (Start Page)**:
        *   展示游戏标题“语闻”和详尽的背景故事（使用提供的文本）。
        *   背景故事需用精美的中文排版呈现。
        *   以视觉上吸引人的方式展示七件代表不同历史人物（张衡、王之涣、姜夔、西帕提亚、张骞、曹雪芹、王希孟）的文物图标/图片。
        *   玩家点击任一文物，触发事件，通过JavaScript读取配置文件获取AI服务信息和所选角色的标识，然后跳转到交互页。
        *   **严格遵守**: 此页面**绝不**能直接显示历史人物的名字。
    *   **交互页 (Interaction Page)**:
        *   页面标题动态显示为“与...对话”（...部分为动态内容，但不显示人名）。
        *   实现一个实时聊天界面，包含消息历史记录区、用户输入框和提交按钮。
        *   前端JavaScript直接通过 `fetch` 或 `XMLHttpRequest` 调用外部AI服务的API。
        *   在进入此页时，前端根据所选角色，从配置中读取AI服务地址和**通用系统Prompt模板**，将所选角色信息（如角色ID或名称）填充到模板中，构造初始请求发送给AI，获取初始回复（欢迎语）并显示。
        *   用户输入问题后，前端将问题、当前会话上下文以及所选角色信息发送给AI服务。AI服务负责理解问题、扮演角色并生成回复。
        *   当用户输入猜测（如“你是张衡吗？”）时，前端将这条消息和角色信息一同发送给AI。AI服务负责判断猜测是否正确（包括处理同义词），并在回复中给出指示（例如，“恭喜你，猜对了！”或“再想想看？”）。前端根据AI的特定回复（需要在 `CHAT.md` 中定义好这些触发词）来决定是否跳转到结果页。
    *   **结果页 (Result Page)**:
        *   当前端根据AI的回复判断玩家猜对身份后，跳转至此页。
        *   展示一段为该历史人物量身定制的介绍性文字，内容涵盖其生平、主要成就，并富有情感和科普价值。
        *   （视频播放功能为未来扩展预留，当前可展示图文介绍）。
        *   页面底部提供一个明显的“返回开始页”按钮。

2.  **AI服务集成与配置**:
    *   **单一AI服务**: 项目只与一个外部AI服务通信。
    *   **配置文件 (`config/ai_config.json`)**:
        *   存放AI服务的连接信息（API端点URL）、认证方式（如API Key的Header名称和值，需使用占位符如 `YOUR_API_KEY_HERE`）。
        *   存放**通用的系统Prompt模板**，其中包含占位符，用于在每次请求时注入具体的角色信息。
        *   存放每个历史人物的标识信息（用于填充Prompt模板）。
        *   **示例结构**:
            ```json
            {
              "api_settings": {
                "endpoint": "https://api.your-ai-service.com/v1/chat/completions",
                "headers": {
                  "Authorization": "Bearer YOUR_API_KEY_HERE",
                  "Content-Type": "application/json"
                }
              },
              "system_prompt_template": "你正在扮演中国历史上的著名人物。你的身份是：{character_name}。你的背景是：{character_background}。你的回答应符合你的身份和时代背景，提供线索但不直接说出名字。当用户猜测你的身份时，如果猜对（需判断同义词），请回复'[[[CORRECT_GUESS]]]'；如果猜错，请给出提示。用户当前的选择是：{selected_character_id}",
              "characters": {
                "zhang_heng": {
                  "id": "zhang_heng",
                  "display_name": "张衡",
                  "background": "东汉时期伟大的科学家、文学家，发明了地动仪。"
                },
                "wang_zhihuan": { ... }
              }
            }
            ```
    *   **同义词处理**: **由外部AI服务全权负责**。前端只需将用户的问题和猜测原样发送给AI，AI根据其强大的语言理解能力判断同义词并给出正确与否的反馈。

3.  **静态资源 (Assets)**:
    *   所有文物图片、背景图、图标等静态资源应存放在 `public/assets` 或 `static` 文件夹中，并通过相对路径引用。

### 技术与内容要求:
*   **语言**: 游戏内所有文本（背景故事、提示、按钮文字等）必须为**中文**。
*   **国际化**: 虽然内容是中文，但代码注释和变量命名建议使用英文，以提高可维护性。
*   **响应式设计**: 虽然主要面向PC端，但应具备基本的响应式能力，确保在常见分辨率下布局合理。
*   **代码质量**: 代码需结构清晰、模块化、注释完整，遵循所选技术栈的最佳实践。
*   **安全性**: 由于是纯前端应用，API密钥会暴露在客户端代码中，这是此架构的固有风险。在交付物中，配置文件中的密钥必须使用占位符，并在 `README.md` 中明确说明此风险及如何配置。
*   **无后端**: 除了外部AI服务，项目本身不包含任何后端代码或服务。所有逻辑都在前端实现，同义词判断依赖AI。

### 最终交付物:
请将以下所有内容打包在一个文件夹中，并提供清晰的说明文档。

1.  **README.md**:
    *   项目名称、一句话描述。
    *   详细阐述项目创意、核心功能模块（特别是前端如何与单一AI交互，以及同义词判断由AI负责）。
    *   明确的运行/部署指南：
        *   如何在本地运行（例如，使用 `Live Server` VSCode插件打开 `index.html`，或使用 `python -m http.server` 启动一个简单的HTTP服务器）。
        *   如何配置AI服务（如何获取API Key，如何填写 `config/ai_config.json` 中的占位符）。
        *   **重点强调**: 由于是纯前端应用，直接打开 `index.html` 可能会因浏览器的CORS策略而无法调用AI API，推荐使用本地服务器。
    *   项目文件夹结构说明。
    *   （可选）如果已部署，提供在线演示链接（注意：部署版本的配置文件中不应包含真实的API密钥）。

2.  **CHAT.md**:
    *   提供用于指导外部AI服务的**通用Prompt模板**（与 `config/ai_config.json` 中的 `system_prompt_template` 一致）。
    *   详细说明前端如何根据此模板和所选角色生成具体的系统Prompt。
    *   明确定义AI在判断猜测正确时应返回的**触发词**（例如 `[[[CORRECT_GUESS]]]`），以便前端监听并跳转页面。
    *   可以包含一些调用AI API的示例请求和预期回复，以展示其行为。

3.  **完整源代码和资源**:
    *   前端代码 (HTML, CSS, JavaScript)。
    *   `config` 文件夹及其中的配置文件 (`ai_config.json`)。
    *   `public` 或 `static` 文件夹及其中的静态资源 (图片等)。
    *   （如果使用了构建工具或包管理器）项目依赖声明文件 (如 `package.json`) 和构建脚本说明。

请开始你的开发工作，将最终成果组织好，交付一个功能完备、结构清晰、文档齐全的纯前端Web应用项目。